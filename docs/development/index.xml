<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Elementary</title><link>https://forensicanalysis.github.io/documentation/docs/development/</link><description>Recent content in Development on Elementary</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://forensicanalysis.github.io/documentation/docs/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Collect custom artifacts</title><link>https://forensicanalysis.github.io/documentation/docs/development/customize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://forensicanalysis.github.io/documentation/docs/development/customize/</guid><description>Collect a custom set of artifacts Clone the repository git clone https://github.com/forensicanalysis/artifactcollector. Run go generate to download all artifacts. Add artifact definition yaml files as needed in pack/artifacts. Do not edit the artifact definitions, as they will be overwritten. Edit pack/ac.yaml and add the artifacts you want to collect. Run go generate. This might yield some errors or problems in your artifacts. On windows you can move the syso into the root folder (e.</description></item><item><title>Define Artifacts</title><link>https://forensicanalysis.github.io/documentation/docs/development/artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://forensicanalysis.github.io/documentation/docs/development/artifacts/</guid><description>Artifact definition files The artifact definition format is described in detail in the Style Guide. The following shows an example for an artifact definition file. It defines the location of linux audit log files on a system.
name: LinuxAuditLogFiles doc: Linux audit log files. sources: - type: FILE attributes: {paths: [&amp;#39;/var/log/audit/*&amp;#39;]} supported_os: [Linux] We use https://github.com/forensicanalysis/artifacts as the main repository for forensic artifacts definitions.</description></item><item><title>Cross compilation</title><link>https://forensicanalysis.github.io/documentation/docs/development/cross/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://forensicanalysis.github.io/documentation/docs/development/cross/</guid><description>Cross compilation is a bit more difficult, as a cross compiler like MinGW is required by CGO.
Example cross compilation for Windows:
CGO_ENABLED=1 CC=i686-w64-mingw32-gcc GOOS=windows GOARCH=386 go build . CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc GOOS=windows GOARCH=amd64 go build .</description></item><item><title>Forensicstore</title><link>https://forensicanalysis.github.io/documentation/docs/development/forensicstore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://forensicanalysis.github.io/documentation/docs/development/forensicstore/</guid><description>A forensicstore is a forensic database that contains selected forensic artifacts.
The forensicstore format The forensicstore format implements the following conventions:
The forensicstore is a sqlite database containing metadata element and compressed raw artifacts. Elements are represented as json objects. Elements are valid STIX 2.1 Observable Objects where applicable. Elements must not have dots (&amp;quot;.&amp;quot;) in their json keys. Files stored in the forensicstore are referenced by element attributes ending in _path, e.</description></item><item><title>Plugins</title><link>https://forensicanalysis.github.io/documentation/docs/development/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://forensicanalysis.github.io/documentation/docs/development/plugins/</guid><description>Command types There are three commands types: Built-in Go Commands, Docker Commands or Script Commands.
Built-in command elementary contains some builtin commands. Those cannot be dynamically extended via plugins.
Docker commands Docker commands utilize installed docker images. Those images need to be named xxx/elementary-yyy. elementary loads some image on startup but also handles other images matching the naming schema.
Script commands Script commands are rum from the config dir. The config is located at:</description></item></channel></rss>