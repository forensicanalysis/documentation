[{"body":"\"What is elementary Elementary\\n Forensicators  Entry Point for Analysis Solves the 80%    Installation macOS Linux Windows \"","section":"Introduction","summary":"What is elementary Elementary\n Forensicators  Entry Point for Analysis Solves the 80%    Installation macOS Linux Windows ","tags":[],"title":"Introduction","url":"/docs/usage/"},{"body":"\"\"","section":"The elementary documentation","summary":"","tags":[],"title":"The elementary documentation","url":"/docs/"},{"body":"\"Artifact definition files The artifact definition format is described in detail in the Style Guide. The following shows an example for an artifact definition file. It defines the location of linux audit log files on a system.\\nname: LinuxAuditLogFiles\\rdoc: Linux audit log files.\\rsources:\\r- type: FILE\\rattributes: {paths: [\\u0026#39;/var/log/audit/*\\u0026#39;]}\\rsupported_os: [Linux]\\rWe use https://github.com/forensicanalysis/artifacts as the main repository for forensic artifacts definitions.\\n\"","section":"Introduction","summary":"Artifact definition files The artifact definition format is described in detail in the Style Guide. The following shows an example for an artifact definition file. It defines the location of linux audit log files on a system.\nname: LinuxAuditLogFiles\rdoc: Linux audit log files.\rsources:\r- type: FILE\rattributes: {paths: [\u0026#39;/var/log/audit/*\u0026#39;]}\rsupported_os: [Linux]\rWe use https://github.com/forensicanalysis/artifacts as the main repository for forensic artifacts definitions.","tags":[],"title":"Acquisition","url":"/docs/usage/acquisition/"},{"body":"\"The command line tool can either run single commands or workflows The command line tool requires a workflow yml file which is executed on an arbitrary number of forensicstores, e.g.:\\nforensicworkflows workflow --file default.yml test/data/example1.forensicstore\\r There are currently 3 different types of commands.\\n##Built-in Command\\nRun either a builtin Go plugin.\\n##Docker\\nRun a docker command. The docker image need to be named xxx/elementary-yyy. The forensicstore will be mounted \\u0026lsquo;/store\\u0026rsquo;.\\n##Script\\nRun a script command from the config dir. The config is located at:\\n $XDG_CONFIG_HOME/elementary or $HOME/.config/elementary for Unix systems $HOME/Library/Application Support/elementary on macOS %AppData%/elementary on Windows  The script needs to be prefixed with elementary, e.g. elementary-runkeys.py. Workflow format The workflow.yml file contains a list of tasks like the following:\\neventlogs:\\rcommand: eventlogs\\rprefetch:\\rcommand: prefetch\\rarguments:\\rformat: table\\routput: prefetch.txt\\r\"","section":"Introduction","summary":"The command line tool can either run single commands or workflows The command line tool requires a workflow yml file which is executed on an arbitrary number of forensicstores, e.g.:\nforensicworkflows workflow --file default.yml test/data/example1.forensicstore\r There are currently 3 different types of commands.\n##Built-in Command\nRun either a builtin Go plugin.\n##Docker\nRun a docker command. The docker image need to be named xxx/elementary-yyy. The forensicstore will be mounted \u0026lsquo;/store\u0026rsquo;.","tags":[],"title":"Processing","url":"/docs/usage/processing/"},{"body":"\"\"","section":"Introduction","summary":"","tags":[],"title":"Compatibility","url":"/docs/usage/compatibility/"},{"body":"\"Hallo\\n Intro Example Cases  Match Hashes Weak passwords USB Devices   Build you own - SFTP  \"","section":"Blog","summary":"Hallo\n Intro Example Cases  Match Hashes Weak passwords USB Devices   Build you own - SFTP  ","tags":[],"title":"Blog","url":"/blog/"},{"body":"\"\"","section":"Development","summary":"","tags":[],"title":"Development","url":"/docs/development/"},{"body":"\"TODO\\nCollect a custom set of artifacts (Advanced) TODO\\nAdd functionality like SFTP upload (Expert) TODO\\n\"","section":"Development","summary":"TODO\nCollect a custom set of artifacts (Advanced) TODO\nAdd functionality like SFTP upload (Expert) TODO","tags":[],"title":"Customization","url":"/docs/development/customize/"},{"body":"\"TODO\\nCreate a simple python plugin TODO\\nCreate an advanced python plugin TODO\\nCreate a Go plugin TODO\\nCreate a docker plugin TODO\\n\"","section":"Development","summary":"TODO\nCreate a simple python plugin TODO\nCreate an advanced python plugin TODO\nCreate a Go plugin TODO\nCreate a docker plugin TODO","tags":[],"title":"Create a Plugin","url":"/docs/development/plugins/"},{"body":"\"The forensicstore format The forensicstore format implements the following conventions:\\n The forensicstore is a folder containing an item.db file and an arbitrary number of other folders. The item.db file contains metadata for all extracted artifacts in a forensic investigation in flattened json objects in a sqlite database. Items are represented as json objects. Items are valid STIX 2.0 Observable Objects where applicable. Items must not have dots (\\u0026quot;.\\u0026quot;) in their json keys. Files stored in the forensicstore are referenced by item attributes ending in _path, e.g. export_path, stdout_path and wmi_path. Any item stored in the forensicstore can have an errors attribute that contains errors that are related to retrival or processing of this item.  Example structure An example directory structure for a forensicstore:\\nexample.forensicstore/\\r├── ChromeCache\\r│ ├── 0003357376fd75df_0\\r│ └── ...\\r├── ChromeHistory\\r│ └── History\\r├── ...\\r└── item.db\\r\"","section":"Development","summary":"The forensicstore format The forensicstore format implements the following conventions:\n The forensicstore is a folder containing an item.db file and an arbitrary number of other folders. The item.db file contains metadata for all extracted artifacts in a forensic investigation in flattened json objects in a sqlite database. Items are represented as json objects. Items are valid STIX 2.0 Observable Objects where applicable. Items must not have dots (\u0026quot;.\u0026quot;) in their json keys.","tags":[],"title":"Architecture","url":"/docs/development/architecture/"},{"body":"\"Code  No overengineering, solve real problem first Be explicit, use no magic Stability over features  Code Review  Use Code Reviews where possible Maximum Linter Stable master  Never commit to master   Use Semantic Versioning  CLI  Use known options where possible (e.g. \\u0026ndash;verbose, \\u0026ndash;version, \\u0026ndash;help, \\u0026ndash;output) Use git and docker as examples for nested command line tools  GUI \"","section":"Development","summary":"Code  No overengineering, solve real problem first Be explicit, use no magic Stability over features  Code Review  Use Code Reviews where possible Maximum Linter Stable master  Never commit to master   Use Semantic Versioning  CLI  Use known options where possible (e.g. \u0026ndash;verbose, \u0026ndash;version, \u0026ndash;help, \u0026ndash;output) Use git and docker as examples for nested command line tools  GUI ","tags":[],"title":"Development Guidelines","url":"/docs/development/guidelines/"},{"body":"\"Hallo\\n\"","section":"Blog","summary":"Hallo","tags":[],"title":"Find md5 hashes on a remote computer","url":"/blog/1/"},{"body":"\"Features  Awesome stuff TODO here  Contact For feedback, questions and discussions you can use the Open Source DFIR Slack.\\n\"","section":"","summary":"Features  Awesome stuff TODO here  Contact For feedback, questions and discussions you can use the Open Source DFIR Slack.","tags":[],"title":"","url":"/"},{"body":"\"\"","section":"","summary":"","tags":[],"title":"Categories","url":"/categories/"},{"body":"\"\"","section":"","summary":"","tags":[],"title":"Tags","url":"/tags/"}]